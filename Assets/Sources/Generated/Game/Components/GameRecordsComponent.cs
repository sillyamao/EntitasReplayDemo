//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentContextGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameContext {

    public GameEntity recordsEntity { get { return GetGroup(GameMatcher.Records).GetSingleEntity(); } }
    public RecordsComponent records { get { return recordsEntity.records; } }
    public bool hasRecords { get { return recordsEntity != null; } }

    public GameEntity SetRecords(System.Collections.Generic.List<InputRecordData> newInputRecords) {
        if (hasRecords) {
            throw new Entitas.EntitasException("Could not set Records!\n" + this + " already has an entity with RecordsComponent!",
                "You should check if the context already has a recordsEntity before setting it or use context.ReplaceRecords().");
        }
        var entity = CreateEntity();
        entity.AddRecords(newInputRecords);
        return entity;
    }

    public void ReplaceRecords(System.Collections.Generic.List<InputRecordData> newInputRecords) {
        var entity = recordsEntity;
        if (entity == null) {
            entity = SetRecords(newInputRecords);
        } else {
            entity.ReplaceRecords(newInputRecords);
        }
    }

    public void RemoveRecords() {
        recordsEntity.Destroy();
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public RecordsComponent records { get { return (RecordsComponent)GetComponent(GameComponentsLookup.Records); } }
    public bool hasRecords { get { return HasComponent(GameComponentsLookup.Records); } }

    public void AddRecords(System.Collections.Generic.List<InputRecordData> newInputRecords) {
        var index = GameComponentsLookup.Records;
        var component = CreateComponent<RecordsComponent>(index);
        component.InputRecords = newInputRecords;
        AddComponent(index, component);
    }

    public void ReplaceRecords(System.Collections.Generic.List<InputRecordData> newInputRecords) {
        var index = GameComponentsLookup.Records;
        var component = CreateComponent<RecordsComponent>(index);
        component.InputRecords = newInputRecords;
        ReplaceComponent(index, component);
    }

    public void RemoveRecords() {
        RemoveComponent(GameComponentsLookup.Records);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherRecords;

    public static Entitas.IMatcher<GameEntity> Records {
        get {
            if (_matcherRecords == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.Records);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherRecords = matcher;
            }

            return _matcherRecords;
        }
    }
}
